#/**
#*
#* A default implementation of eureka server configuration as required by
#* {@link EurekaServerConfig}.
#*
#* <p>
#* The information required for configuring eureka server is provided in a
#* configuration file.The configuration file is searched for in the classpath
#* with the name specified by the property <em>eureka.server.props</em> and with
#* the suffix <em>.properties</em>. If the property is not specified,
#* <em>eureka-server.properties</em> is assumed as the default.The properties
#* that are looked up uses the <em>namespace</em> passed on to this class.
#* </p>
#*
#* <p>
#* If the <em>eureka.environment</em> property is specified, additionally
#* <em>eureka-server-<eureka.environment>.properties</em> is loaded in addition
#* to <em>eureka-server.properties</em>.
#* </p>
#*
#* @author Karthik Ranganathan
#*
#*/

#/**
#* Gets the <em>AWS Access Id</em>. This is primarily used for
#* <em>Elastic IP Biding</em>. The access id should be provided with
#* appropriate AWS permissions to bind the EIP.
#*
#* @return
#*/
eureka.awsAccessId=null

#/**
#* Gets the <em>AWS Secret Key</em>. This is primarily used for
#* <em>Elastic IP Biding</em>. The access id should be provided with
#* appropriate AWS permissions to bind the EIP.
#*
#* @return
#*/
eureka.awsSecretKey=null

#/**
#* Gets the number of times the server should try to bind to the candidate
#* EIP.
#*
#* <p>
#* <em>The changes are effective at runtime.</em>
#* </p>
#*
#* @return the number of times the server should try to bind to the
#*         candidate EIP.
#*/
eureka.eipBindRebindRetries=3

#/**
#* Get the interval with which the server should check if the EIP is bound
#* and should try to bind in the case if it is already not bound, iff the EIP
#* is not currently bound.
#* <p>
#* <em>The changes are effective at runtime.</em>
#* </p>
#*
#* @return the time in milliseconds.
#*/
eureka.eipBindRebindRetryIntervalMsWhenUnbound=(1 * 60 * 1000)

#/**
#* Gets the interval with which the server should check if the EIP is bound
#* and should try to bind in the case if it is already not bound, iff the EIP
#* is already bound. (so this refresh is just for steady state checks)
#* <p>
#* <em>The changes are effective at runtime.</em>
#* </p>
#*
#* @return the time in milliseconds.
#*/
eureka.eipBindRebindRetryIntervalMs=(5 * 60 * 1000)

#/**
#* Checks to see if the eureka server is enabled for self preservation.
#*
#* <p>
#* When enabled, the server keeps track of the number of <em>renewals</em>
#* it should receive from the server. Any time, the number of renewals drops
#* below the threshold percentage as defined by
#* {@link #getRenewalPercentThreshold()}, the server turns off expirations
#* to avert danger.This will help the server in maintaining the registry
#* information in case of network problems between client and the server.
#* <p>
#* <em>The changes are effective at runtime.</em>
#* </p>
#*
#* @return true to enable self preservation, false otherwise.
#*/
eureka.enableSelfPreservation=true

#/**
#* The minimum percentage of renewals that is expected from the clients in
#* the period specified by {@link #getRenewalThresholdUpdateIntervalMs()}.
#* If the renewals drop below the threshold, the expirations are disabled if
#* the {@link #shouldEnableSelfPreservation()} is enabled.
#*
#* <p>
#* <em>The changes are effective at runtime.</em>
#* </p>
#*
#* @return value between 0 and 1 indicating the percentage. For example,
#*         <code>85%</code> will be specified as <code>0.85</code>.
#*/
eureka.renewalPercentThreshold=0.85

#/**
#* The interval with which the threshold as specified in
#* {@link #getRenewalPercentThreshold()} needs to be updated.
#*
#* @return time in milliseconds indicating the interval.
#*/
eureka.renewalThresholdUpdateIntervalMs=(15 * 60 * 1000)

#/**
#* The interval with which the information about the changes in peer eureka
#* nodes is updated. The user can use the DNS mechanism or dynamic
#* configuration provided by <a href="https://github.com/Netflix/archaius">Archaius</a> to
#* change the information dynamically.
#* <p>
#* <em>The changes are effective at runtime.</em>
#* </p>
#*
#* @return timer in milliseconds indicating the interval.
#*/
eureka.peerEurekaNodesUpdateIntervalMs= (10 * 60 * 1000)

#/**
#* If set to true, the replicated data send in the request will be always compressed.
#* This does not define response path, which is driven by "Accept-Encoding" header.
#*/
eureka.enableReplicatedRequestCompression=false

#/**
#* Get the number of times the replication events should be retried with
#* peers.
#* <p>
#* <em>The changes are effective at runtime.</em>
#* </p>
#*
#* @return the number of retries.
#*/
eureka.numberOfReplicationRetries=5

#/**
#* Gets the interval with which the status information about peer nodes is
#* updated.
#* <p>
#* <em>The changes are effective at runtime.</em>
#* </p>
#*
#* @return time in milliseconds indicating the interval.
#*/
eureka.peerEurekaStatusRefreshTimeIntervalMs=(30 * 1000)

#/**
#* Gets the time to wait when the eureka server starts up unable to get
#* instances from peer nodes. It is better not to start serving rightaway
#* during these scenarios as the information that is stored in the registry
#* may not be complete.
#*
#* When the instance registry starts up empty, it builds over time when the
#* clients start to send heartbeats and the server requests the clients for
#* registration information.
#*
#* @return time in milliseconds.
#*/
eureka.waitTimeInMsWhenSyncEmpty=(1000 * 60 * 5)

#/**
#* Gets the timeout value for connecting to peer eureka nodes for
#* replication.
#*
#* @return timeout value in milliseconds.
#*/
eureka.peerNodeConnectTimeoutMs=200

#/**
#* Gets the timeout value for reading information from peer eureka nodes for
#* replication.
#*
#* @return timeout value in milliseconds.
#*/
eureka.peerNodeReadTimeoutMs=200

#/**
#* Gets the total number of <em>HTTP</em> connections allowed to peer eureka
#* nodes for replication.
#*
#* @return total number of allowed <em>HTTP</em> connections.
#*/
eureka.peerNodeTotalConnections=1000

#/**
#* Gets the total number of <em>HTTP</em> connections allowed to a
#* particular peer eureka node for replication.
#*
#* @return total number of allowed <em>HTTP</em> connections for a peer
#*         node.
#*/
eureka.peerNodeTotalConnectionsPerHost=500

#/**
#* Gets the idle time after which the <em>HTTP</em> connection should be
#* cleaned up.
#*
#* @return idle time in seconds.
#*/
eureka.peerNodeConnectionIdleTimeoutSeconds=30

#/**
#* Get the time for which the delta information should be cached for the
#* clients to retrieve the value without missing it.
#*
#* @return time in milliseconds
#*/
eureka.retentionTimeInMSInDeltaQueue=(3 * 60 * 1000)

#/**
#* Get the time interval with which the clean up task should wake up and
#* check for expired delta information.
#*
#* @return time in milliseconds.
#*/
eureka.deltaRetentionTimerIntervalInMs=(30 * 1000)

#/**
#* Get the time interval with which the task that expires instances should
#* wake up and run.
#*
#* @return time in milliseconds.
#*/
eureka.evictionIntervalTimerInMs=(60 * 1000)

#/**
#* Get the timeout value for querying the <em>AWS</em> for <em>ASG</em>
#* information.
#*
#* @return timeout value in milliseconds.
#*/
eureka.asgQueryTimeoutMs=300

#/**
#* Get the time interval with which the <em>ASG</em> information must be
#* queried from <em>AWS</em>.
#*
#* @return time in milliseconds.
#*/
eureka.asgUpdateIntervalMs= (5 * 60 * 1000)

#/**
#* Get the expiration value for the cached <em>ASG</em> information
#*
#* @return time in milliseconds.
#*/
eureka.asgCacheExpiryTimeoutMs=(10 * 60 * 1000)

#/**
#* Gets the time for which the registry payload should be kept in the cache
#* if it is not invalidated by change events.
#*
#* @return time in seconds.
#*/
eureka.responseCacheAutoExpirationInSeconds=180

#/**
#* Gets the time interval with which the payload cache of the client should
#* be updated.
#*
#* @return time in milliseconds.
#*/
eureka.responseCacheUpdateIntervalMs=(30 * 1000)

#/**
#* The {@link com.netflix.eureka.registry.ResponseCache} currently uses a two level caching
#* strategy to responses. A readWrite cache with an expiration policy, and a readonly cache
#* that caches without expiry.
#*
#* @return true if the read only cache is to be used
#*/
eureka.shouldUseReadOnlyResponseCache=true

#/**
#* Checks to see if the delta information can be served to client or not.
#* <p>
#* <em>The changes are effective at runtime.</em>
#* </p>
#*
#* @return true if the delta information is allowed to be served, false
#*         otherwise.
#*/
eureka.disableDelta=false

#/**
#* Get the idle time for which the status replication threads can stay
#* alive.
#*
#* @return time in minutes.
#*/
eureka.maxIdleThreadAgeInMinutesForStatusReplication=10

#/**
#* Get the minimum number of threads to be used for status replication.
#*
#* @return minimum number of threads to be used for status replication.
#*/
eureka.minThreadsForStatusReplication=1

#/**
#* Get the maximum number of threads to be used for status replication.
#*
#* @return maximum number of threads to be used for status replication.
#*/
eureka.maxThreadsForStatusReplication=1

#/**
#* Get the maximum number of replication events that can be allowed to back
#* up in the status replication pool.
#* <p>
#* Depending on the memory allowed, timeout and the replication traffic,
#* this value can vary.
#* </p>
#*
#* @return the maximum number of replication events that can be allowed to
#*         back up.
#*/
eureka.maxElementsInStatusReplicationPool=10000

#/**
#* Checks whether to synchronize instances when timestamp differs.
#* <p>
#* <em>The changes are effective at runtime.</em>
#* </p>
#*
#* @return true, to synchronize, false otherwise.
#*/
eureka.syncWhenTimestampDiffers=true

#/**
#* Get the number of times that a eureka node would try to get the registry
#* information from the peers during startup.
#*
#* @return the number of retries
#*/
eureka.numberRegistrySyncRetries=5

#/**
#* Get the wait/sleep time between each retry sync attempts, if the prev retry failed and there are
#* more retries to attempt.
#*
#* @return the wait time in ms between each sync retries
#*/
eureka.registrySyncRetryWaitMs=30*1000

#/**
#* Get the maximum number of replication events that can be allowed to back
#* up in the replication pool. This replication pool is responsible for all
#* events except status updates.
#* <p>
#* Depending on the memory allowed, timeout and the replication traffic,
#* this value can vary.
#* </p>
#*
#* @return the maximum number of replication events that can be allowed to
#*         back up.
#*/
eureka.maxElementsInPeerReplicationPool=10000

#/**
#* Get the idle time for which the replication threads can stay alive.
#*
#* @return time in minutes.
#*/
eureka.maxIdleThreadAgeInMinutesForPeerReplication=15

#/**
#* Get the minimum number of threads to be used for replication.
#*
#* @return minimum number of threads to be used for replication.
#*/
eureka.minThreadsForPeerReplication=5

#/**
#* Get the maximum number of threads to be used for replication.
#*
#* @return maximum number of threads to be used for replication.
#*/
eureka.maxThreadsForPeerReplication=20

#/**
#* Get the minimum number of available peer replication instances
#* for this instance to be considered healthy. The design of eureka allows
#* for an instance to continue operating with zero peers, but that would not
#* be ideal.
#* <p>
#* The default value of -1 is interpreted as a marker to not compare
#* the number of replicas. This would be done to either disable this check
#* or to run eureka in a single node configuration.
#*
#* @return minimum number of available peer replication instances
#*         for this instance to be considered healthy.
#*/
eureka.minAvailableInstancesForPeerReplication=-1

#/**
#* Get the time in milliseconds to try to replicate before dropping
#* replication events.
#*
#* @return time in milliseconds
#*/
eureka.maxTimeForReplication=30000

#/**
#* Checks whether the connections to replicas should be primed. In AWS, the
#* firewall requires sometime to establish network connection for new nodes.
#*
#* @return true, if connections should be primed, false otherwise.
#*/
eureka.primeAwsReplicaConnections=true

#/**
#* Checks to see if the delta information can be served to client or not for
#* remote regions.
#* <p>
#* <em>The changes are effective at runtime.</em>
#* </p>
#*
#* @return true if the delta information is allowed to be served, false
#*         otherwise.
#*/
eureka.disableDeltaForRemoteRegions=false

#/**
#* Gets the timeout value for connecting to peer eureka nodes for remote
#* regions.
#*
#* @return timeout value in milliseconds.
#*/
eureka.remoteRegionConnectTimeoutMs=1000

#/**
#* Gets the timeout value for reading information from peer eureka nodes for
#* remote regions.
#*
#* @return timeout value in milliseconds.
#*/
eureka.remoteRegionReadTimeoutMs=1000

#/**
#* Gets the total number of <em>HTTP</em> connections allowed to peer eureka
#* nodes for remote regions.
#*
#* @return total number of allowed <em>HTTP</em> connections.
#*/

eureka.remoteRegionTotalConnections=1000

#/**
#* Gets the total number of <em>HTTP</em> connections allowed to a
#* particular peer eureka node for remote regions.
#*
#* @return total number of allowed <em>HTTP</em> connections for a peer
#*         node.
#*/
eureka.remoteRegionTotalConnectionsPerHost=500

#/**
#* Gets the idle time after which the <em>HTTP</em> connection should be
#* cleaned up for remote regions.
#*
#* @return idle time in seconds.
#*/
eureka.remoteRegionConnectionIdleTimeoutSeconds=30

#/**
#* Indicates whether the content fetched from eureka server has to be
#* compressed for remote regions whenever it is supported by the server. The
#* registry information from the eureka server is compressed for optimum
#* network traffic.
#*
#* @return true, if the content need to be compressed, false otherwise.
#*/
eureka.remoteRegion.gzipContent=true

#/**
#* Get a map of region name against remote region discovery url.
#*  ',' split
#* @return - An unmodifiable map of remote region name against remote region discovery url. Empty map if no remote
#* region url is defined.
#*/
eureka.remoteRegionUrlsWithName=null

#/**
#* Get the list of remote region urls.
#* @return - array of string representing {@link java.net.URL}s.
#* @deprecated Use {@link #getRemoteRegionUrlsWithName()}
# ',' split
#*/
eureka.remoteRegionUrls=null

#/**
#* Returns a list of applications that must be retrieved from the passed remote region. <br/>
#* This list can be <code>null</code> which means that no filtering should be applied on the applications
#* for this region i.e. all applications must be returned. <br/>
#* A global whitelist can also be configured which can be used when no setting is available for a region, such a
#* whitelist can be obtained by passing <code>null</code> to this method.
#*
#* @param regionName Name of the region for which the application whitelist is to be retrieved. If null a global
#*                   setting is returned.
#*
#* @return A set of application names which must be retrieved from the passed region. If <code>null</code> all
#* applications must be retrieved.
#',' split
#*/
@Nullable
eureka.remoteRegion.global.appWhiteList=null

#/**
#* Get the time interval for which the registry information need to be fetched from the remote region.
#* @return time in seconds.
#*/
eureka.remoteRegion.registryFetchIntervalInSeconds=30

#/**
#* Size of a thread pool used to execute remote region registry fetch requests. Delegating these requests
#* to internal threads is necessary workaround to https://bugs.openjdk.java.net/browse/JDK-8049846 bug.
#*/
eureka.remoteRegion.fetchThreadPoolSize=20

#/**
#* Gets the fully qualified trust store file that will be used for remote region registry fetches.
#* @return
#*/
eureka.remoteRegion.trustStoreFileName=""

#/**
#* Get the remote region trust store's password.
#*/
eureka.remoteRegion.trustStorePassword="changeit"

#/**
#* Old behavior of fallback to applications in the remote region (if configured) if there are no instances of that
#* application in the local region, will be disabled.
#*
#* @return {@code true} if the old behavior is to be disabled.
#*/
eureka.remoteRegion.disable.transparent.fallback=false

#/**
#* Indicates whether the replication between cluster nodes should be batched for network efficiency.
#* @return {@code true} if the replication needs to be batched.
#*/
eureka.shouldBatchReplication=false

#/**
#* Indicates whether the eureka server should log/metric clientAuthHeaders
#* @return {@code true} if the clientAuthHeaders should be logged and/or emitted as metrics
#*/
eureka.auth.shouldLogIdentityHeaders=true

#/**
#* Indicates whether the rate limiter should be enabled or disabled.
#*/
eureka.rateLimiter.enabled=false

#/**
#* Indicate if rate limit standard clients. If set to false, only non standard clients
#* will be rate limited.
#*/
eureka.rateLimiter.throttleStandardClients=false

#/**
#* A list of certified clients. This is in addition to standard eureka Java clients.
#*/
eureka.rateLimiter.privilegedClients=null

#/**
#* Rate limiter, token bucket algorithm property. See also {@link #getRateLimiterRegistryFetchAverageRate()}
#* and {@link #getRateLimiterFullFetchAverageRate()}.
#*/
eureka.rateLimiter.burstSize=10

#/**
#* Rate limiter, token bucket algorithm property. Specifies the average enforced request rate.
#* See also {@link #getRateLimiterBurstSize()}.
#*/
eureka.rateLimiter.registryFetchAverageRate=500

#/**
#* Rate limiter, token bucket algorithm property. Specifies the average enforced request rate.
#* See also {@link #getRateLimiterBurstSize()}.
#*/
eureka.rateLimiter.fullFetchAverageRate=100

#/**
#* Name of the Role used to describe auto scaling groups from third AWS accounts.
#*/
eureka.listAutoScalingGroupsRoleName="ListAutoScalingGroups"

#/**
#* @return the class name of the full json codec to use for the server. If none set a default codec will be used
#*/
eureka.jsonCodecName=null

#/**
#* @return the class name of the full xml codec to use for the server. If none set a default codec will be used
#*/
eureka.xmlCodecName=null

#/**
#* Get the configured binding strategy EIP or Route53.
#* @return the configured binding strategy
#*/
eureka.awsBindingStrategy=""

#/**
#*
#* @return the ttl used to set up the route53 domain if new
#*/
eureka.route53DomainTTL=30L

#/**
#* Gets the number of times the server should try to bind to the candidate
#* Route53 domain.
#*
#* <p>
#* <em>The changes are effective at runtime.</em>
#* </p>
#*
#* @return the number of times the server should try to bind to the
#*         candidate Route53 domain.
#*/
eureka.route53BindRebindRetries=3

#/**
#* Gets the interval with which the server should check if the Route53 domain is bound
#* and should try to bind in the case if it is already not bound.
#* <p>
#* <em>The changes are effective at runtime.</em>
#* </p>
#*
#* @return the time in milliseconds.
#*/
eureka.route53BindRebindRetryIntervalMs= (5 * 60 * 1000)

#/**
#* To avoid configuration API pollution when trying new/experimental or features or for the migration process,
#* the corresponding configuration can be put into experimental configuration section.
#*
#* @return a property of experimental feature
#*/
eureka.experimental.{name}=null